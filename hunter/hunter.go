package hunter

import (
	"bufio"
	"crypto/tls"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/gookit/color"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"reflect"
	"runtime"
	"strconv"
	"strings"
	"time"
)

type Config struct {
	Email          string
	Hunter_token   string
	Quake_token    string
	Quake_timeout  string
	Hunter_timeout string
	Fofa_token     string
	Fofa_timeout   string
	Maxpage        string
}

type AutoGenerated struct {
	Code int `json:"code"`
	Data struct {
		AccountType string `json:"account_type"`
		Total       int    `json:"total"`
		Time        int    `json:"time"`
		Arr         []struct {
			IsRisk         string      `json:"is_risk"`
			Url            string      `json:"url"`
			Ip             string      `json:"ip"`
			Port           int         `json:"port"`
			WebTitle       string      `json:"web_title"`
			Domain         string      `json:"domain"`
			IsRiskProtocol string      `json:"is_risk_protocol"`
			Protocol       string      `json:"protocol"`
			BaseProtocol   string      `json:"base_protocol"`
			StatusCode     int         `json:"status_code"`
			Component      interface{} `json:"component"`
			Os             string      `json:"os"`
			Company        string      `json:"company"`
			Number         string      `json:"number"`
			Country        string      `json:"country"`
			Province       string      `json:"province"`
			City           string      `json:"city"`
			UpdatedAt      string      `json:"updated_at"`
			IsWeb          string      `json:"is_web"`
			AsOrg          string      `json:"as_org"`
			Isp            string      `json:"isp"`
			Banner         string      `json:"banner"`
		} `json:"arr"`
		ConsumeQuota string `json:"consume_quota"`
		RestQuota    string `json:"rest_quota"`
		SyntaxPrompt string `json:"syntax_prompt"`
	} `json:"data"`
	Message string `json:"message"`
}

// 获取当前执行程序所在的绝对路径
func GetCurrentAbPathByExecutable() string {
	exePath, err := os.Executable()
	if err != nil {
		log.Fatal(err)
	}
	res, _ := filepath.EvalSymlinks(filepath.Dir(exePath))
	return res
}

func GetConfig() Config {
	//创建一个空的结构体,将本地文件读取的信息放入
	c := &Config{}
	//创建一个结构体变量的反射
	cr := reflect.ValueOf(c).Elem()
	//打开文件io流
	optSys := runtime.GOOS
	path := ""
	if optSys == "windows" {
		path = GetCurrentAbPathByExecutable() + "\\config.ini"
	} else {
		path = GetCurrentAbPathByExecutable() + "/config.ini"
	}
	f, err := os.Open(path)
	if err != nil {
		//log.Fatal(err)
		color.RGBStyleFromString("244,211,49").Println("[Error] Hunter configuration file error!!!")
		os.Exit(1)
	}
	defer func() {
		if err = f.Close(); err != nil {
			log.Fatal(err)
		}
	}()
	//我们要逐行读取文件内容
	s := bufio.NewScanner(f)
	for s.Scan() {
		//以=分割,前面为key,后面为value
		var str = s.Text()
		var index = strings.Index(str, "=")
		var key = str[0:index]
		var value = str[index+1:]
		//通过反射将字段设置进去
		cr.FieldByName(key).Set(reflect.ValueOf(value))
	}
	err = s.Err()
	if err != nil {
		log.Fatal(err)
	}
	//返回Config结构体变量
	return *c
}

func hunter_api(keyword string, key string, page int, size int) string {
	input := []byte(keyword)
	encodeString := base64.StdEncoding.EncodeToString(input)
	nowTime := time.Now()
	endtime := nowTime.Format("2006-01-02")
	starttime := nowTime.AddDate(0, -1, 0).Format("2006-01-02")
	api_request := fmt.Sprintf("https://hunter.qianxin.com/openApi/search?api-key=%s&search=%s&page=%s&page_size=%s&is_web=3&port_filter=false&start_time=%s&end_time=%s", strings.Trim(key, " "), encodeString, strconv.Itoa(page), strconv.Itoa(size), starttime, endtime)
	return api_request
}

func hunterhttp(url string, timeout string) *AutoGenerated {
	var itime, err = strconv.Atoi(timeout)
	if err != nil {
		log.Println("hunter超时参数错误: ", err)
	}
	transport := &http.Transport{TLSClientConfig: &tls.Config{InsecureSkipVerify: true}}
	client := &http.Client{
		Timeout:   time.Duration(itime) * time.Second,
		Transport: transport,
	}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("Accept", "*/*;q=0.8")
	req.Header.Set("Connection", "close")
	req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36")
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	result, _ := io.ReadAll(resp.Body)
	res := &AutoGenerated{}
	json.Unmarshal(result, &res)
	return res
}

func Hunterall(keyword string) (urls []string) {
	color.RGBStyleFromString("244,211,49").Println("请耐心等待hunter搜索......")
	hunter := GetConfig()
	url := hunter_api(keyword, hunter.Hunter_token, 1, 100)
	res := hunterhttp(url, hunter.Hunter_timeout)
	pagelength := res.Data.Total/100 + 1
	for _, value := range res.Data.Arr {
		urls = append(urls, value.Ip+":"+strconv.Itoa(value.Port))
	}
	Maxpage, _ := strconv.Atoi(hunter.Maxpage)
	if pagelength > 1 {
		for i := 2; i <= pagelength && i <= Maxpage*10; i++ {
			fmt.Println("正在请求第" + strconv.Itoa(i) + "页数据")
			url = hunter_api(keyword, hunter.Hunter_token, i, 100)
			res = hunterhttp(url, hunter.Hunter_timeout)
			if len(res.Data.Arr) > 0 {
				for _, value := range res.Data.Arr {
					urls = append(urls, value.Ip+":"+strconv.Itoa(value.Port))
				}
			}
		}
	}

	return urls
}
